priority 1

snippet rsc "React Simple Component" b
import React from 'react';

const ${1:`!v expand('%:t:r')`} = () => (
	<${2:div}>
	  $0
	</${2/(\w+).*/$1/}>
);

export default $1;
endsnippet

snippet rfc "React Functional Component" b
import React from 'react';

const ${1:`!v expand('%:t:r')`} = ({ $2 }) => {
	return (
		<${3:div}>
		  $0
		</${3/(\w+).*/$1/}>
	);
};

export default $1;
endsnippet

snippet rfpc "React Functional Props Component" b
import React from 'react';
import PropTypes from 'prop-types';

const ${1:`!v expand('%:t:r')`} = ({ $2 }) => {
	return (
		<${4:div}>
		  $0
		</${4/(\w+).*/$1/}>
	);
};

$1.defaultProps = {$3};

$1.propTypes = {`!p
props = t[2]

if props:
	snip >> 1
	for prop in props.split(', '):
		snip.rv += prop + ': PropTypes.any,'
`
};

export default $1;
endsnippet

snippet rrfc "React Redux Functional Component" b
import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';

const mapStateToProps = state => ({ $2: state.$2 });

const ${1:`!v expand('%:t:r')`} = ({ ${3:$2} }) => {
	return (
		<${5:div}>
		  $0
		</${5/(\w+).*/$1/}>
	);
};

$1.defaultProps = {$4};

$1.propTypes = {`!p
props = t[3]

if props:
	snip >> 1
	for prop in props.split(', '):
		snip.rv += prop + ': PropTypes.any,'
`
};

export default connect(mapStateToProps)($1);
endsnippet

snippet us.s "useState" w
const [$1, set${1/\w+\s*/\u$0/g}] = useState(${3:''})${0:;}
endsnippet

snippet us.e "useEffect" w
useEffect(() => {
  $1
})${0:;}
endsnippet

snippet us.er "useEffect with return" w
useEffect(() => {
  $1
	return () => {
    $2
	};
})${0:;}
endsnippet

snippet us.c "useContext" w
const $1 = useContext($2)${0:;}
endsnippet

snippet us.r "useReducer" w
const [$1, dispatch] = useReducer($1Reducer, ${2:${VISUAL:initialState}})
const $1Reducer = (state, action) => {
	switch (action.type) {
		default:
			return state;
	}
}${0:;}
endsnippet

snippet us.cb "useCallback" w
useCallback(
	() => {
		$1
	},
	[$2],
)${0:;}
endsnippet

snippet us.m "useMemo" w
const $1 = useMemo(() => {
	$2
}, [$3])${0:;}
endsnippet

snippet us.rf "useRef" w
const $1 = useRef($2)${0:;}
endsnippet
