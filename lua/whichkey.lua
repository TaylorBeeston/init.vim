local wk = require("which-key")
local fmtCmd = vim.lsp.buf.format == nil and "<cmd>lua vim.lsp.buf.formatting_sync(nil, 5000)<CR>"
    or "<cmd>lua vim.lsp.buf.format({ timeout_ms = 5000 })<CR>"

local get_input = require("helpers/input")
local cycle_diagnostics = require("helpers/diagnostics")

-- Leader Keybindings
wk.add({
    { "<leader><S-Tab>", ":bp<CR>",                                   desc = "Cycle through buffers" },
    { "<leader><Tab>",   ":bd<CR>",                                   desc = "Close buffer" },
    { "<leader>K",       "<cmd>lua vim.lsp.buf.hover()<CR>",          desc = "Forcibly Hover" },
    { "<leader>bc",      "<cmd>Telescope git_bcommits<cr>",           desc = "Buffer Git Commits" },
    { "<leader>br",      "<cmd>Telescope git_branches<cr>",           desc = "Git Branches" },
    { "<leader>c",       group = "Cellular Automaton" },
    { "<leader>cg",      "<cmd>CellularAutomaton game_of_life<CR>",   desc = "Game of Life" },
    { "<leader>ch",      "<cmd>Telescope command_history<cr>",        desc = "Command History" },
    { "<leader>cm",      "<cmd>CellularAutomaton make_it_rain<CR>",   desc = "Make it Rain" },
    { "<leader>d",       group = "Duck" },
    { "<leader>dd",      require("duck").hatch,                       desc = "Hatch Duck" },
    { "<leader>dk",      require("duck").cook,                        desc = "Cook Duck" },
    { "<leader>doc",     "<cmd>lua require('neogen').generate()<CR>", desc = "Generate Doc Comments" },
    { "<leader>ds",      "<cmd>Telescope lsp_document_symbols<cr>",   desc = "Document Symbols" },
    { "<leader>dws",     "<cmd>Telescope lsp_workspace_symbols<cr>",  desc = "Workspace Symbols" },
    { "<leader>ef",      "<cmd>Telescope find_files<cr>",             desc = "Search by Filename" },
    { "<leader>er",      "<cmd>Telescope oldfiles<cr>",               desc = "Search by Recent Files" },
    { "<leader>ex",      "<cmd>RnvimrToggle<cr>",                     desc = "Explore Files" },
    { "<leader>fb",      "<cmd>Telescope buffers<cr>",                desc = "Find Buffer" },
    { "<leader>fh",      "<cmd>Telescope help_tags<cr>",              desc = "Find Help" },
    { "<leader>fm",      fmtCmd,                                      desc = "Format Buffer" },
    {
        "<leader>gD",
        function()
            require("vtsls").commands.goto_source_definition()
        end,
        desc = "Go to source definition (TS-Only)",
    },
    { "<leader>gc",  "<cmd>Telescope git_commits<cr>",          desc = "Git Commits" },
    {
        "<leader>gfr",
        function()
            get_input({
                title = "Rename File",
                default_value = vim.fn.expand("%:t"),
                on_submit = function(value)
                    vim.cmd(":GRename " .. value)
                end,
            })
        end,
        desc = "Git File Rename",
    },
    { "<leader>gr",  "<cmd>Telescope lsp_references<cr>",       desc = "Go to References" },
    { "<leader>gs",  "<cmd>Telescope git_status<cr>",           desc = "Git status" },
    { "<leader>gt",  group = "Github" },
    { "<leader>gtg", "<cmd>Telescope gh gist<cr>",              desc = "Gists" },
    { "<leader>gti", "<cmd>Telescope gh issues<cr>",            desc = "Issues" },
    { "<leader>gtp", "<cmd>Telescope gh pull_request<cr>",      desc = "Pull Requests" },
    { "<leader>j",   group = "jest" },
    { "<leader>jd",  group = "debug" },
    { "<leader>jdf", ":lua require('jester').debug_file()<CR>", desc = "Debug current file" },
    { "<leader>jdl", ":lua require('jester').debug_last()<CR>", desc = "Debug last test(s)" },
    { "<leader>jdn", ":lua require('jester').debug()<CR>",      desc = "Debug nearest test(s)" },
    { "<leader>jf",  ":lua require('jester').run_file()<CR>",   desc = "Run current file" },
    { "<leader>jl",  ":lua require('jester').run_last()<CR>",   desc = "Run last test(s)" },
    { "<leader>jn",  ":lua require('jester').run()<CR>",        desc = "Run nearest test(s)" },
    { "<leader>jq",  group = "quick" },
    {
        "<leader>jqf",
        ":lua require('jester').run_file({ terminal_cmd = \"lua require('FTerm').open()\"})<CR>",
        desc = "Run current file in floating terminal",
    },
    {
        "<leader>jql",
        ":lua require('jester').run_last({ terminal_cmd = \"lua require('FTerm').open()\"})<CR>",
        desc = "Run last test(s) in floating terminal",
    },
    {
        "<leader>jqn",
        ":lua require('jester').run({ terminal_cmd = \"lua require('FTerm').open()\"})<CR>",
        desc = "Run nearest test(s) in floating terminal",
    },
    { "<leader>km",   "<cmd>Telescope keymaps<cr>",                 desc = "Keymaps" },
    { "<leader>l",    "<cmd>lua require('lsp_lines').toggle()<CR>", desc = "Toggle LSP Lines" },
    { "<leader>ll",   ":Lazy<CR>",                                  desc = "Lazy" },
    { "<leader>n",    group = "Notify" },
    { "<leader>nd",   require("notify").dismiss,                    desc = "Dismiss Notification" },
    { "<leader>o",    group = "Octo" },
    { "<leader>o?",   "<cmd>Octo actions<CR>",                      desc = "Show Available Actions" },
    { "<leader>oa",   group = "Assignee" },
    { "<leader>oaa",  "<cmd>Octo assignee add<CR>",                 desc = "Add" },
    { "<leader>oar",  "<cmd>Octo assignee remove<CR>",              desc = "Remove" },
    { "<leader>oc",   group = "Comment" },
    { "<leader>oca",  "<cmd>Octo comment add<CR>",                  desc = "Add" },
    { "<leader>ocd",  "<cmd>Octo comment delete<CR>",               desc = "Delete" },
    { "<leader>oe",   group = "R[e]po" },
    { "<leader>oeb",  "<cmd>Octo repo browser<CR>",                 desc = "Browser (opens repo on Github)" },
    { "<leader>oef",  "<cmd>Octo repo fork<CR>",                    desc = "Fork" },
    { "<leader>oel",  "<cmd>Octo repo list<CR>",                    desc = "List" },
    { "<leader>oeu",  "<cmd>Octo repo url<CR>",                     desc = "URL (Copies URL to clipboard)" },
    { "<leader>oev",  "<cmd>Octo repo view<CR>",                    desc = "View" },
    { "<leader>og",   "<cmd>Octo gist list<CR>",                    desc = "List gists" },
    { "<leader>oi",   group = "Issue" },
    { "<leader>oib",  "<cmd>Octo issue browser<CR>",                desc = "Browser (opens issue on Github)" },
    { "<leader>oie",  "<cmd>Octo issue edit<CR>",                   desc = "Edit" },
    { "<leader>oil",  "<cmd>Octo issue list<CR>",                   desc = "List" },
    { "<leader>oin",  "<cmd>Octo issue create<CR>",                 desc = "New (Create)" },
    { "<leader>oio",  "<cmd>Octo issue reopen<CR>",                 desc = "ReOpen" },
    { "<leader>oir",  "<cmd>Octo issue reload<CR>",                 desc = "Reload" },
    { "<leader>ois",  "<cmd>Octo issue search<CR>",                 desc = "Search" },
    { "<leader>oiu",  "<cmd>Octo issue url<CR>",                    desc = "URL (Copies URL to clipboard)" },
    { "<leader>oix",  "<cmd>Octo issue close<CR>",                  desc = "Close" },
    { "<leader>ol",   group = "Label" },
    { "<leader>ola",  "<cmd>Octo label add<CR>",                    desc = "Add" },
    { "<leader>olc",  "<cmd>Octo label create<CR>",                 desc = "Create" },
    { "<leader>olr",  "<cmd>Octo label remove<CR>",                 desc = "Remove" },
    { "<leader>op",   group = "PR" },
    { "<leader>opa",  "<cmd>Octo pr changes<CR>",                   desc = "Ch[a]nges" },
    { "<leader>opb",  "<cmd>Octo pr browser<CR>",                   desc = "Browser (opens PR on Github)" },
    { "<leader>opc",  "<cmd>Octo pr commits<CR>",                   desc = "Commits" },
    { "<leader>opd",  "<cmd>Octo pr diff<CR>",                      desc = "Diff" },
    { "<leader>ope",  "<cmd>Octo pr edit<CR>",                      desc = "Edit" },
    { "<leader>oph",  "<cmd>Octo pr checkout<CR>",                  desc = "C[h]eckout" },
    { "<leader>opi",  "<cmd>Octo pr checks<CR>",                    desc = "Checks (C[I])" },
    { "<leader>opk",  "<cmd>Octo pr ready<CR>",                     desc = "Ready" },
    { "<leader>opl",  "<cmd>Octo pr list<CR>",                      desc = "List" },
    { "<leader>opm",  "<cmd>Octo pr merge<CR>",                     desc = "Merge" },
    { "<leader>opn",  "<cmd>Octo pr create<CR>",                    desc = "New (Create)" },
    { "<leader>opo",  "<cmd>Octo pr reopen<CR>",                    desc = "ReOpen" },
    { "<leader>opr",  "<cmd>Octo pr reload<CR>",                    desc = "Reload" },
    { "<leader>ops",  "<cmd>Octo pr search<CR>",                    desc = "Search" },
    { "<leader>opu",  "<cmd>Octo pr url<CR>",                       desc = "URL (Copies URL to clipboard)" },
    { "<leader>opx",  "<cmd>Octo pr close<CR>",                     desc = "Close" },
    { "<leader>or",   group = "[R]eview/[Re]act" },
    { "<leader>orc",  "<cmd>Octo review commit<CR>",                desc = "Commit" },
    { "<leader>ord",  "<cmd>Octo review discard<CR>",               desc = "Discard" },
    { "<leader>ore",  group = "R[e]act" },
    { "<leader>orec", "<cmd>Octo react confused<CR>",               desc = "Confused" },
    { "<leader>ored", "<cmd>Octo react thumbs_down<CR>",            desc = "Thumbs Down" },
    { "<leader>oree", "<cmd>Octo react eyes<CR>",                   desc = "Eyes" },
    { "<leader>oreh", "<cmd>Octo react heart<CR>",                  desc = "Heart" },
    { "<leader>orel", "<cmd>Octo react laugh<CR>",                  desc = "Laugh" },
    { "<leader>orep", "<cmd>Octo react party<CR>",                  desc = "Party" },
    { "<leader>orer", "<cmd>Octo react rocket<CR>",                 desc = "Rocket" },
    { "<leader>oreu", "<cmd>Octo react thumbs_up<CR>",              desc = "Thumbs Up" },
    { "<leader>orm",  "<cmd>Octo review comments<CR>",              desc = "Co[m]ments" },
    { "<leader>orr",  "<cmd>Octo review resume<CR>",                desc = "Resume" },
    { "<leader>ors",  "<cmd>Octo review start<CR>",                 desc = "Start" },
    { "<leader>oru",  "<cmd>Octo review submit<CR>",                desc = "S[u]bmit" },
    { "<leader>orx",  "<cmd>Octo review close<CR>",                 desc = "Close" },
    { "<leader>ot",   group = "Thread" },
    { "<leader>otr",  "<cmd>Octo thread resolve<CR>",               desc = "Resolve" },
    { "<leader>otu",  "<cmd>Octo thread unresolve<CR>",             desc = "Unresolve" },
    { "<leader>rf",   ":luafile %<CR>",                             desc = "Source Current File" },
    { "<leader>rg",   "<cmd>Telescope live_grep<cr>",               desc = "Ripgrep" },
    {
        "<leader>ru",
        function()
            require("vtsls").commands.remove_unused()
        end,
        desc = "[R]emove [U]nused (TS-Only)",
    },
    { "<leader>sb", "<cmd>Telescope current_buffer_fuzzy_find<cr>", desc = "Search Buffer" },
    { "<leader>so", "<cmd>SymbolsOutline<CR>",                      desc = "Symbols Outline" },
    { "<leader>t",  group = "tab" },
    { "<leader>tb", ":tabp<CR>",                                    desc = "Previous Tab" },
    { "<leader>tc", ":tab new<CR>",                                 desc = "New Empty Tab" },
    { "<leader>td", cycle_diagnostics,                              desc = "Cycle Diagnostics" },
    {
        "<leader>tih",
        function()
            vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled({ bufnr = nil }))
        end,
        desc = "Toggle inlay hints",
    },
    { "<leader>tn",  ":tabn<CR>",                     desc = "Next Tab" },
    { "<leader>tp",  ":tabp<CR>",                     desc = "Previous Tab" },
    { "<leader>tq",  ":tab close<CR>",                desc = "Close Tab" },
    { "<leader>trs", "<cmd>Telescope treesitter<cr>", desc = "Treesitter" },
    { "<leader>ts",  ":tab split<CR>",                desc = "New Tab With This Buffer" },
    { "<leader>w",   group = "window" },
    { "<leader>w+",  ":wincmd +<CR>",                 desc = "Increase Window Height" },
    { "<leader>w-",  ":wincmd -<CR>",                 desc = "Decrease Window Height" },
    { "<leader>w<",  ":wincmd <<CR>",                 desc = "Decrease Window Width" },
    { "<leader>w=",  ":FocusToggle<CR>",              desc = "Make All Windows The Same Size" },
    { "<leader>w>",  ":wincmd ><CR>",                 desc = "Increase Window Width" },
    { "<leader>wH",  ":wincmd H<CR>",                 desc = "Move Window Left" },
    { "<leader>wJ",  ":wincmd J<CR>",                 desc = "Move Window Down" },
    { "<leader>wK",  ":wincmd K<CR>",                 desc = "Move Window Up" },
    { "<leader>wL",  ":wincmd L<CR>",                 desc = "Move Window Right" },
    { "<leader>wh",  ":wincmd h<CR>",                 desc = "Move Left" },
    { "<leader>wj",  ":wincmd j<CR>",                 desc = "Move Down" },
    { "<leader>wk",  ":wincmd k<CR>",                 desc = "Move Up" },
    { "<leader>wl",  ":wincmd l<CR>",                 desc = "Move Right" },
    { "<leader>wq",  ":wincmd q<CR>",                 desc = "Close Window" },
    { "<leader>ws",  ":sp<CR>",                       desc = "Horizontal Split" },
    { "<leader>wv",  "<cmd>vs<cr>",                   desc = "Vertical Split" },
})

-- No prefix
wk.add({
    { "<A-,>",       ":bp<CR>",          desc = "Buffer previous" },
    { "<A-.>",       ":bn<CR>",          desc = "Buffer next" },
    { "<A-0>",       ":BufferLast<CR>",  desc = "Go to last buffer" },
    { "<A-1>",       ":BufferGoto1<CR>", desc = "Go to buffer 1" },
    { "<A-2>",       ":BufferGoto2<CR>", desc = "Go to buffer 2" },
    { "<A-3>",       ":BufferGoto3<CR>", desc = "Go to buffer 3" },
    { "<A-4>",       ":BufferGoto4<CR>", desc = "Go to buffer 4" },
    { "<A-5>",       ":BufferGoto5<CR>", desc = "Go to buffer 5" },
    { "<A-6>",       ":BufferGoto6<CR>", desc = "Go to buffer 6" },
    { "<A-7>",       ":BufferGoto7<CR>", desc = "Go to buffer 7" },
    { "<A-8>",       ":BufferGoto8<CR>", desc = "Go to buffer 8" },
    { "<A-9>",       ":BufferGoto9<CR>", desc = "Go to buffer 9" },
    { "<A-c>",       ":BufferClose<CR>", desc = "Close buffer" },
    { "<A-i>",       ":BufferPin<CR>",   desc = "Pin/unpin buffer" },
    { "<A-p>",       ":BufferPick<CR>",  desc = "Magic buffer-picking mode" },
    { "<LeftMouse>", "<Nop>",            desc = "" },
    { "zz",          "za",               desc = "Toggle fold" },
})
